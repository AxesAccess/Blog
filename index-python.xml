<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blog</title>
<link>https://blog.frequentist.org/#category=Python</link>
<atom:link href="https://blog.frequentist.org/index-python.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.5</generator>
<lastBuildDate>Sat, 31 May 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Product Cards Creation Application</title>
  <dc:creator>Aleksei </dc:creator>
  <link>https://blog.frequentist.org/posts/20250531-content-mate/</link>
  <description><![CDATA[ 





<p>This application is designed to create product cards for an online store. It utilizes a large language model (LLM) and programming libraries to generate detailed descriptions based on product specifications, images, and files. This allows a business to streamline the process of crafting informative and engaging product listings with minimal manual effort. This enhances both productivity and content quality.</p>
<iframe src="https://www.linkedin.com/embed/feed/update/urn:li:ugcPost:7350848934489063424?collapsed=1" height="568" width="100%" frameborder="0" allowfullscreen="1" title="How I created an AI application from scratch">
</iframe>



 ]]></description>
  <category>App</category>
  <category>LLM</category>
  <category>Python</category>
  <guid>https://blog.frequentist.org/posts/20250531-content-mate/</guid>
  <pubDate>Sat, 31 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://blog.frequentist.org/posts/20250531-content-mate/mark-konig-Tl8mDaue_II-unsplash_square.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Creating Anki Flashcards From List of Words</title>
  <dc:creator>Aleksei </dc:creator>
  <link>https://blog.frequentist.org/posts/20250503-anki-part-1/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>This notebook demonstrates how to create Anki flashcards from a list of words. The example uses a list of German words related to “Die Stadt” (The City) and translates them into English. It also generates audio files for the words using Google Text-to-Speech.</p>
<div id="fig-banner" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-banner-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blog.frequentist.org/posts/20250503-anki-part-1/banner.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig quarto-uncaptioned" id="fig-banner-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1
</figcaption>
</figure>
</div>
</section>
<section id="install-required-libraries" class="level2">
<h2 class="anchored" data-anchor-id="install-required-libraries">Install Required Libraries</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install pandas googletrans gtts genanki</span></code></pre></div>
</section>
<section id="set-parameters" class="level2">
<h2 class="anchored" data-anchor-id="set-parameters">Set Parameters</h2>
<div id="afd4545b" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">SRC_LANG <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"de"</span></span>
<span id="cb2-2">DST_LANG <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"en"</span></span>
<span id="cb2-3">DATA_DIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span></span>
<span id="cb2-4">SRC_FILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"die Stadt.txt"</span></span>
<span id="cb2-5">AUDIO_DIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/audio"</span></span></code></pre></div>
</div>
</section>
<section id="load-words-list" class="level2">
<h2 class="anchored" data-anchor-id="load-words-list">Load Words List</h2>
<p>Here we load the list of words from a text file. The file should contain one word per line, and we will remove any empty lines.</p>
<div id="a0dd4ad2" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATA_DIR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>SRC_FILE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-4">    lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.readlines()</span>
<span id="cb3-5">lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line.strip() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> line.strip()]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove empty lines</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(lines, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>])</span>
<span id="cb3-8">df.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Word</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">113</td>
<td>das Kreuzfahrtschiff / die Kreuzfahrtschiffe</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">114</td>
<td>zu Fuß</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">115</td>
<td>die Fahrkarte / die Fahrkarten</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">116</td>
<td>der Fahrplan / die Fahrpläne</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">117</td>
<td>die Endstation / die Endstationen</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>In the particular example, the words are in the format “Word / Plural”. For example, “die Stadt / die Städte” means “the city / the cities (plural)”. Let’s split singular and plural forms into separate rows.</p>
<div id="beb7ed6d" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" / "</span>)</span>
<span id="cb4-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-3">df.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Word</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">228</td>
<td>die Fahrkarten</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">229</td>
<td>der Fahrplan</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">230</td>
<td>die Fahrpläne</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">231</td>
<td>die Endstation</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">232</td>
<td>die Endstationen</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="translate-words" class="level2">
<h2 class="anchored" data-anchor-id="translate-words">Translate Words</h2>
<p>We will use the <code>googletrans</code> library to translate the words from German to English. The library provides an asynchronous interface for translation, which is useful for bulk processing.</p>
<div id="768de64e" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> googletrans <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Translator</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> translate_bulk(texts: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>):</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> Translator() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> translator:</span>
<span id="cb5-5">        translations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> translator.translate(texts, src<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SRC_LANG, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DST_LANG)</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [translation.text <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> translation <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> translations]</span>
<span id="cb5-7"></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> translate_bulk(</span>
<span id="cb5-10">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"die Polizei"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"die Motorräder"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"die Krankenhäuser"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"die Bahnhöfe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"die Flugzeuge"</span>]</span>
<span id="cb5-11">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>['the police',
 'The motorcycles',
 'The hospitals',
 'The train stations',
 'The aircraft']</code></pre>
</div>
</div>
<p>In the next chunk of code, we will create list of words to translate, then will apply the <code>translate_bulk</code> function to this list.</p>
<div id="db5da064" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>].to_list()</span>
<span id="cb7-2"></span>
<span id="cb7-3">translations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> translate_bulk(texts)</span>
<span id="cb7-4"></span>
<span id="cb7-5">translations[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>['the city', 'the cities', 'the village', 'The villages', 'the street']</code></pre>
</div>
</div>
<p>The <code>googletrans</code> library employs undocumented Google Translate API, which may lead to rate limiting or blocking. We will hope that it will work for our case. If you encounter issues, consider using a paid translation service or API.</p>
<p>Next, we will add the translations to the DataFrame.</p>
<div id="66366cb8" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Translation"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> translations</span></code></pre></div>
</div>
</section>
<section id="generate-audio-files" class="level2">
<h2 class="anchored" data-anchor-id="generate-audio-files">Generate Audio Files</h2>
<p>We will use the <code>gtts</code> library to generate audio files for the words. This library uses Google Text-to-Speech API and it’s free. The generated audio files will be saved in the <code>AUDIO_DIR</code> directory. The filenames will be generated using a hash of the word.</p>
<div id="e1c34ce6" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> gtts <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gTTS</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hashlib</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gen_audio(sentence):</span>
<span id="cb10-6">    h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hashlib.shake_128(sentence.encode()).hexdigest(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb10-7">    filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>h<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.mp3"</span></span>
<span id="cb10-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> filename <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(AUDIO_DIR)]:</span>
<span id="cb10-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> filename</span>
<span id="cb10-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb10-11">        gTTS(text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sentence, lang<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SRC_LANG, slow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).save(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>AUDIO_DIR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb10-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb10-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> filename</span>
<span id="cb10-15"></span>
<span id="cb10-16"></span>
<span id="cb10-17">sample_audio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_audio(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"die Krankenhäuser"</span>)</span>
<span id="cb10-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Audio file saved as: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_audio<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Audio file saved as: 308d817b87e2.mp3</code></pre>
</div>
</div>
<p>The <code>gen_audio</code> function generates a hash of the word and checks if the audio file already exists in the <code>AUDIO_DIR</code>. If it does, it returns the filename. If not, it generates the audio file and saves it.</p>
<audio controls="1" src="https://github.com/AxesAccess/Blog/raw/refs/heads/main/posts/20250503-anki-part-1/data/audio/308d817b87e2.mp3" preload="auto">
</audio>
</section>
<section id="add-audio-file-paths-to-dataframe" class="level2">
<h2 class="anchored" data-anchor-id="add-audio-file-paths-to-dataframe">Add Audio File Paths to DataFrame</h2>
<div id="b465fe5c" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Audio"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(gen_audio)</span></code></pre></div>
</div>
</section>
<section id="shuffle-dataframe" class="level2">
<h2 class="anchored" data-anchor-id="shuffle-dataframe">Shuffle DataFrame</h2>
<p>We will shuffle the DataFrame to randomize the order of the flashcards.</p>
<div id="aa3a8f37" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sample(frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
</section>
<section id="set-up-anki-deck-and-model" class="level2">
<h2 class="anchored" data-anchor-id="set-up-anki-deck-and-model">Set Up Anki Deck and Model</h2>
<p>We will use the <code>genanki</code> library to create an Anki deck and model. The model defines the structure of the flashcards, while the deck contains the flashcards themselves. To get unique IDs for the model and deck, we will use random numbers. We will set seed for reproducibility.</p>
<div id="a253480a" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb14-2"></span>
<span id="cb14-3">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb14-4"></span>
<span id="cb14-5">MODEL_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vocabulary"</span></span>
<span id="cb14-6">DECK_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Die Stadt"</span></span>
<span id="cb14-7">MODEL_ID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randrange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>)</span>
<span id="cb14-8">DECK_ID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randrange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>)</span></code></pre></div>
</div>
</section>
<section id="add-cards-to-anki-deck" class="level2">
<h2 class="anchored" data-anchor-id="add-cards-to-anki-deck">Add Cards to Anki Deck</h2>
<p>Next, will create a model for the flashcards and add the cards to the Anki deck.</p>
<div id="c83e4292" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> genanki</span>
<span id="cb15-2"></span>
<span id="cb15-3">my_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genanki.Model(</span>
<span id="cb15-4">    MODEL_ID,</span>
<span id="cb15-5">    MODEL_NAME,</span>
<span id="cb15-6">    fields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb15-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Question"</span>},</span>
<span id="cb15-8">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Answer"</span>},</span>
<span id="cb15-9">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Audio"</span>},</span>
<span id="cb15-10">    ],</span>
<span id="cb15-11">    templates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb15-12">        {</span>
<span id="cb15-13">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Question</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb15-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"qfmt"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;div class="head"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Question</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/div&gt;'</span>,</span>
<span id="cb15-15">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"afmt"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;div class="head"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Question</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/div&gt;&lt;hr id="answer"&gt; </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb15-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                &lt;div class="head"&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Answer</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/div&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Audio</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb15-17">        },</span>
<span id="cb15-18">    ],</span>
<span id="cb15-19">    css<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb15-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        .head {font-size: x-large;} </span></span>
<span id="cb15-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        .spot {text-decoration: underline;} </span></span>
<span id="cb15-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        .sentence {font-style: italic; font-size: normal!important;}</span></span>
<span id="cb15-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span>,</span>
<span id="cb15-24">)</span>
<span id="cb15-25"></span>
<span id="cb15-26">my_deck <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genanki.Deck(</span>
<span id="cb15-27">    DECK_ID,</span>
<span id="cb15-28">    DECK_NAME,</span>
<span id="cb15-29">)</span>
<span id="cb15-30"></span>
<span id="cb15-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.iterrows():</span>
<span id="cb15-32">    my_note <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genanki.Note(</span>
<span id="cb15-33">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my_model,</span>
<span id="cb15-34">        fields<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb15-35">            row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Translation"</span>],</span>
<span id="cb15-36">            row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>],</span>
<span id="cb15-37">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[sound:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Audio'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span>,</span>
<span id="cb15-38">        ],</span>
<span id="cb15-39">    )</span>
<span id="cb15-40">    my_deck.add_note(my_note)</span></code></pre></div>
</div>
</section>
<section id="export-anki-deck" class="level2">
<h2 class="anchored" data-anchor-id="export-anki-deck">Export Anki Deck</h2>
<p>Finally, we will export the Anki deck to a file. The file will be saved in the <code>DATA_DIR</code> directory with the name <strong>Die Stadt.apkg</strong>. The audio files will be included in the package.</p>
<div id="0850616b" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">my_package <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> genanki.Package(my_deck)</span>
<span id="cb16-2">my_package.media_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>AUDIO_DIR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> filename <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Audio"</span>].values]</span>
<span id="cb16-3">my_package.write_to_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATA_DIR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DECK_NAME<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.apkg"</span>)</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this notebook, we learned how to create Anki flashcards from a list of words. We used the <code>googletrans</code> library to translate the words from German to English and the <code>gtts</code> library to generate audio files for the words. Finally, we used the <code>genanki</code> library to create an Anki deck and export it to a file. The generated Anki deck can be imported into Anki app and used for studying the vocabulary.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://apps.ankiweb.net/" target="_blank">Anki apps</a></li>
<li><a href="https://ankiweb.net/shared/decks" target="_blank">Shared Decks - AnkiWeb</a></li>
</ul>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>In the next notebook we will create Anki flashcards from an arbitrary document like an article or a book.</p>


</section>

 ]]></description>
  <category>NLP</category>
  <category>Python</category>
  <guid>https://blog.frequentist.org/posts/20250503-anki-part-1/</guid>
  <pubDate>Sat, 03 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://blog.frequentist.org/posts/20250503-anki-part-1/image.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Implementing a Local Retrieval-Augmented Generation System</title>
  <dc:creator>Aleksei </dc:creator>
  <link>https://blog.frequentist.org/posts/20250321-rag/</link>
  <description><![CDATA[ 





<section id="what-is-rag" class="level2">
<h2 class="anchored" data-anchor-id="what-is-rag">What is RAG?</h2>
<p>RAG (Retrieval-Augmented Generation) is a technology that combines the search external sources and generation using large language models. It allows for more accurate and informative responses by leveraging the information retrieved from a corpus of text to generate contextually relevant answers. RAG is particularly useful for question-answering tasks where the answer requires external knowledge beyond what is present in the training data of the language model.</p>
</section>
<section id="how-does-rag-work" class="level2">
<h2 class="anchored" data-anchor-id="how-does-rag-work">How does RAG work?</h2>
<p>RAG consists of two main components: a retriever and a generator. The retriever is responsible for searching a corpus of text to find relevant information based on the input query. The generator then uses the retrieved information to generate a response. By combining these two components, RAG can produce more informative and contextually relevant responses compared to traditional language models.</p>
<div class="cell" data-file="diagrams/rag.mmd" data-layout-align="default">
<div class="cell-output-display">
<div id="fig-rag" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-rag-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div>
<pre class="mermaid mermaid-js" data-label="fig-rag">---
config:
  theme: default
  look: classic
---
flowchart LR
    A["Reference&lt;br&gt;documents&lt;br&gt;📄📄📄"] --&gt; n1["Embedding&lt;br&gt;🔢🔢🔢"]
    n1 --&gt; n3["Vector database&lt;br&gt;🗄️🗄️🗄️"]
    n3 --&gt; n4["Retriever&lt;br&gt;🔎"]
    n5["User query&lt;br&gt;👤💬"] --&gt; n6["Embedding&lt;br&gt;🔢🔢🔢"]
    n5 -- 💬 --&gt; n8["Augmented&lt;br&gt;query 📄💬&lt;br&gt;"]
    n6 --&gt; n4
    n8 --&gt; n9["Large Language&lt;br&gt;Model 🧠"]
    n9 --&gt; n10["Response&lt;br&gt;🗨️"]
    n4 -- 📄 --&gt; n8

</pre>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-rag-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: RAG process overview
</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="how-to-implement-a-rag-system" class="level2">
<h2 class="anchored" data-anchor-id="how-to-implement-a-rag-system">How to Implement a RAG System</h2>
<p>In this tutorial, we will implement a simple RAG system using a large language model (LLM) and a text retrieval system. We will use the Hugging Face Transformers library to load a pre-trained LLM and the Faiss library to build a vector database for text retrieval. We will then combine these components to create a question-answering system that retrieves relevant information from a corpus of text and generates responses based on the retrieved information.</p>
<p>Let’s get started by installing the necessary libraries and setting up the components for our RAG system.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install bitsandbytes faiss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cpu langchain langchain_community <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-2">langchain_huggingface sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>transformers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>quiet</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup, SoupStrainer</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sentence_transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentenceTransformer</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.embeddings <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HuggingFaceEmbeddings</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_core.documents <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Document</span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.vectorstores.faiss <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FAISS</span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_community.document_loaders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> WebBaseLoader</span>
<span id="cb2-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain.text_splitter <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RecursiveCharacterTextSplitter</span></code></pre></div>
<section id="data-collection" class="level3">
<h3 class="anchored" data-anchor-id="data-collection">Data Collection</h3>
<p>We will parse the Wikipedia category page to extract links to articles.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> urllib.parse <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urlparse</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fetch_links(url):</span>
<span id="cb3-4">    links <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-5">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb3-6">    soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html.parser'</span>)</span>
<span id="cb3-7">    domain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> urlparse(url).netloc</span>
<span id="cb3-8"></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ul <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ul'</span>):</span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> li <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ul.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'li'</span>):</span>
<span id="cb3-11">            link <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> li.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>)</span>
<span id="cb3-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> link <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"href"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> link.attrs:</span>
<span id="cb3-13">                href <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> link.attrs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"href"</span>]</span>
<span id="cb3-14">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/wiki"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> href[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb3-15">                    links.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>domain<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>href<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> links</span></code></pre></div>
<p>Set the <code>url</code> variable and get the links.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://en.wikipedia.org/wiki/Category:Machine_learning_algorithms'</span></span>
<span id="cb4-2">links <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fetch_links(url)</span></code></pre></div>
<p>Next, we will download articles as the docs.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USER_AGENT"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb5-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) "</span></span>
<span id="cb5-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AppleWebKit/537.36 (KHTML, like Gecko) "</span></span>
<span id="cb5-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0"</span></span>
<span id="cb5-5">)</span>
<span id="cb5-6"></span>
<span id="cb5-7">loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WebBaseLoader(</span>
<span id="cb5-8">    links[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>:],</span>
<span id="cb5-9">    bs_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb5-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parse_only"</span>: SoupStrainer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"div"</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mw-body-content"</span>}),</span>
<span id="cb5-11">    },</span>
<span id="cb5-12">    bs_get_text_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"separator"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"strip"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>},</span>
<span id="cb5-13">)</span>
<span id="cb5-14">docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loader.load()</span></code></pre></div>
</section>
<section id="text-splitting-and-embedding" class="level3">
<h3 class="anchored" data-anchor-id="text-splitting-and-embedding">Text Splitting and Embedding</h3>
<p>Here we break documents into shorter chunks—overlapping parts that should be provided to the LLM as context.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">text_splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecursiveCharacterTextSplitter(chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, chunk_overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb6-2">split_docs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_splitter.split_documents(docs)</span></code></pre></div>
<p>We need to perform quick search for relevant information, so let’s transform texts to embeddings and load them into vector database.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_huggingface <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> HuggingFaceEmbeddings</span>
<span id="cb7-2"></span>
<span id="cb7-3">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sentence-transformers/paraphrase-multilingual-mpnet-base-v2"</span></span>
<span id="cb7-4">model_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"device"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>}</span>
<span id="cb7-5">encode_kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normalize_embeddings"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>}</span>
<span id="cb7-6">embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HuggingFaceEmbeddings(</span>
<span id="cb7-7">    model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_name, model_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_kwargs, encode_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encode_kwargs</span>
<span id="cb7-8">)</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">vector_store <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FAISS.from_documents(split_docs, embedding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>embedding)</span></code></pre></div>
</section>
<section id="question-answering-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="question-answering-pipeline">Question-Answering Pipeline</h3>
<p>Here we define function for retrieving relevant documents from the database.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> retrieve(query, top_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb9-2">    documents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vector_store.search(query, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"similarity"</span>)</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> documents[:top_k]</span></code></pre></div>
<p>We will use local LLM. Let’s authorize on HuggingFace which is mandatory for downloading certain models.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> huggingface_hub <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> login</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> google.colab <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> userdata</span>
<span id="cb10-3"></span>
<span id="cb10-4">login(token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> userdata.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HF_TOKEN"</span>))</span></code></pre></div>
<p>Download model, define tokenizer and create config.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForCausalLM, AutoTokenizer</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb11-3"></span>
<span id="cb11-4">MODEL_NAME <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Qwen/Qwen2.5-7B"</span></span>
<span id="cb11-5"></span>
<span id="cb11-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb11-7">    MODEL_NAME,</span>
<span id="cb11-8">    load_in_8bit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-9">    torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16,</span>
<span id="cb11-10">    device_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>,</span>
<span id="cb11-11">)</span>
<span id="cb11-12">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb11-13"></span>
<span id="cb11-14">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(MODEL_NAME)</span></code></pre></div>
<p>Let’s put context retrieval and generation pipeline into a function.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">gen_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(</span>
<span id="cb12-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text-generation"</span>, model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, tokenizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tokenizer, return_full_text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb12-3">)</span>
<span id="cb12-4"></span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_response(query):</span>
<span id="cb12-7">    relevant_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> retrieve(query)</span>
<span id="cb12-8">    context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join([t.model_dump()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"page_content"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> relevant_texts])</span>
<span id="cb12-9">    prompt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""Answer question using only information provided in the context.</span></span>
<span id="cb12-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    If the context contains no relevant information, say "I couldn't find the information".</span></span>
<span id="cb12-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Context: '''</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>context<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb12-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Question: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>query<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    Answer:</span></span>
<span id="cb12-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb12-15">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gen_pipeline(prompt)</span>
<span id="cb12-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"generated_text"</span>]</span></code></pre></div>
</section>
</section>
<section id="testing-the-rag-system" class="level2">
<h2 class="anchored" data-anchor-id="testing-the-rag-system">Testing the RAG System</h2>
<p>Here starts our Q&amp;A session.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the Actor-critic algorithm in reinforcement learning?"</span></span>
<span id="cb13-2"></span>
<span id="cb13-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_response(query)</span>
<span id="cb13-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(answer)</span></code></pre></div>
<pre><code>The actor-critic algorithm (AC) is a family of reinforcement learning (RL) algorithms that combine policy-based RL algorithms such as policy gradient methods, and value-based RL algorithms such as value iteration, Q-learning, SARSA, and TD learning. An AC algorithm consists of two main components: an "actor" that determines which actions to take according to a policy function, and a "critic" that evaluates those actions according to a value function. Some AC algorithms are on-policy, some are off-policy. Some apply to either continuous or discrete action spaces. Some work in both cases.</code></pre>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the purpose of backpropagation in neural networks?"</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_response(query)</span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(answer)</span></code></pre></div>
<pre><code>The purpose of backpropagation in neural networks is to adjust the weights of the connections between neurons in order to minimize the error between the predicted output and the actual output. This is done by propagating the error backwards through the network, starting from the output layer and moving towards the input layer, hence the name "backpropagation." The goal is to find the optimal set of weights that will allow the network to make accurate predictions on new, unseen data.</code></pre>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Explain the concept of Curriculum learning in machine learning."</span></span>
<span id="cb17-2"></span>
<span id="cb17-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_response(query)</span>
<span id="cb17-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(answer)</span></code></pre></div>
<pre><code>Curriculum learning in machine learning is a technique that involves gradually introducing more complex concepts or data to a model as it learns. This approach is inspired by the way humans learn, starting with simple concepts and building upon them. In the context provided, it is mentioned that this technique has its roots in the early study of neural networks, particularly in Jeffrey Elman's 1993 paper. Bengio et al. demonstrated successful application of curriculum learning in image classification tasks, such as identifying geometric shapes with increasingly complex forms, and language modeling tasks, such as training with a gradually expanding vocabulary. The authors conclude that curriculum strategies can be beneficial for machine learning models, especially when dealing with complex or large-scale problems.</code></pre>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How does K-nearest neighbors (K-NN) algorithm classify data?"</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_response(query)</span>
<span id="cb19-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(answer)</span></code></pre></div>
<pre><code>The K-nearest neighbors (K-NN) algorithm classifies data by a plurality vote of its neighbors, with the object being assigned to the class most common among its K nearest neighbors (K is a positive integer, typically small). If K = 1, then the object is simply assigned to the class of that single nearest neighbor.</code></pre>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is Federated Learning of Cohorts and how does it improve data privacy?"</span></span>
<span id="cb21-2"></span>
<span id="cb21-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_response(query)</span>
<span id="cb21-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(answer)</span></code></pre></div>
<pre><code>Federated Learning of Cohorts (FLoC) is a type of web tracking that groups people into "cohorts" based on their browsing history for the purpose of interest-based advertising. It was being developed as a part of Google's Privacy Sandbox initiative, which includes several other advertising-related technologies with bird-themed names. FLoC was being tested in Chrome 89 as a replacement for third-party cookies. Despite "federated learning" in the name, FLoC does not utilize any federated learning. FLoC improves data privacy by grouping people into cohorts based on their browsing history, rather than tracking individual users. This means that advertisers can still target users based on their interests, but without the need for individual user data.</code></pre>
<p>Looks good. Let’s ask something that is not in the context. For instance, there was no articles on Transformer architecture among wiki articles.</p>
<section id="out-of-context-questions" class="level3">
<h3 class="anchored" data-anchor-id="out-of-context-questions">Out-of-Context Questions</h3>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How does the Transformer architecture improve upon traditional RNNs and LSTMs in NLP tasks?"</span></span>
<span id="cb23-2"></span>
<span id="cb23-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_response(query)</span>
<span id="cb23-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(answer)</span></code></pre></div>
<pre><code>The Transformer architecture improves upon traditional RNNs and LSTMs in NLP tasks by using self-attention mechanisms to capture long-range dependencies between words in a sentence. This allows the model to process entire sentences at once, rather than sequentially like RNNs and LSTMs. Additionally, the Transformer architecture uses a fixed-size attention mechanism, which makes it more efficient and scalable than RNNs and LSTMs.</code></pre>
<p>That’s interesting. To be sure that there’s no information on this topic, let’s check context.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">retrieve(query)</span></code></pre></div>
<pre><code>[
    Document(
        id='a2ae5aee-3b78-4804-a983-25d08fb8f5d3', 
        metadata={'source': 'https://en.wikipedia.org/wiki/Loss_functions_for_classification'}, 
        page_content='Andrew Ng Fei-Fei Li Alex Krizhevsky Ilya Sutskever Demis Hassabis David Silver Ian Goodfellow Andrej Karpathy Architectures Neural Turing machine Differentiable neural computer Transformer Vision transformer (ViT) Recurrent neural network (RNN) Long short-term memory (LSTM) Gated recurrent unit (GRU) Echo state network Multilayer perceptron (MLP) Convolutional neural network (CNN) Residual neural network (RNN) Highway network Mamba Autoencoder Variational autoencoder (VAE) Generative adversarial network (GAN) Graph neural network (GNN) Portals Technology Category Artificial neural networks Machine learning List Companies Projects Retrieved from " https://en.wikipedia.org/w/index.php?title=Loss_functions_for_classification&amp;oldid=1261562183 "'
    ),
    Document(
        id='b267b523-9330-4b33-bc3a-b4e6edec109f',
        metadata={'source': 'https://en.wikipedia.org/wiki/Policy_gradient_method'}, 
        page_content='neural computer Transformer Vision transformer (ViT) Recurrent neural network (RNN) Long short-term memory (LSTM) Gated recurrent unit (GRU) Echo state network Multilayer perceptron (MLP) Convolutional neural network (CNN) Residual neural network (RNN) Highway network Mamba Autoencoder Variational autoencoder (VAE) Generative adversarial network (GAN) Graph neural network (GNN) Portals Technology Category Artificial neural networks Machine learning List Companies Projects Retrieved from " https://en.wikipedia.org/w/index.php?title=Policy_gradient_method&amp;oldid=1280215280 "'
    )
]</code></pre>
<p>It appears that the query retrieved random parts of pages mentioning transformers. However, as they contained no valuable information, the answer was fully generated by the LLM. Although the response was accurate, we may want to enhance the retrieval function by setting a threshold for relevancy to minimize the risk of hallucinations.</p>
<p>Let’s ask a question from the completely different domain.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How does the process of photosynthesis work in plants?"</span></span>
<span id="cb27-2"></span>
<span id="cb27-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_response(query)</span>
<span id="cb27-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(answer)</span></code></pre></div>
<pre><code>I couldn't find the information.</code></pre>
<p>This question left unanswered. What about another one?</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How does blockchain technology ensure security and decentralization?"</span></span>
<span id="cb29-2"></span>
<span id="cb29-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_response(query)</span>
<span id="cb29-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(answer)</span></code></pre></div>
<pre><code>Blockchain technology ensures security and decentralization through its decentralized nature and cryptographic algorithms. It operates on a distributed network of nodes, where each node maintains a copy of the entire blockchain. This means that no single entity has control over the entire system, making it resistant to tampering and censorship. Additionally, blockchain uses cryptographic algorithms to secure transactions and data, ensuring that only authorized parties can access and modify the information. This combination of decentralization and cryptographic security makes blockchain technology highly secure and decentralized.</code></pre>
<p>Unexpectedly, one of the documents contained information on this topic, so the answer was generated based on the retrieved context.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">retrieve(query)</span></code></pre></div>
<pre><code>[
    Document(
        id='3d968d3b-1889-4435-b329-c9081400e8c4', 
        metadata={'source': 'https://en.wikipedia.org/wiki/Augmented_Analytics'}, 
        page_content='to democratising data: Data Parameterisation and Characterisation. Data Decentralisation using an OS of blockchain and DLT technologies, as well as an independently governed secure data exchange to enable trust. Consent Market-driven Data Monetisation. When it comes to connecting assets, there are two features that will accelerate the adoption and usage of data democratisation: decentralized identity management and business data object monetization of data ownership. It enables multiple individuals and organizations to identify, authenticate, and authorize participants and organizations, enabling them to access services, data or systems across multiple networks, organizations, environments, and use cases. It empowers users and enables a personalized, self-service digital onboarding system so that users can self-authenticate without relying on a central administration function to process their information. Simultaneously, decentralized identity management ensures the user is authorized'
    ),
    Document(
    id='98578608-2a8d-4533-a655-b556202dda7d', 
    metadata={'source': 'https://en.wikipedia.org/wiki/Augmented_Analytics'}, 
    page_content='so that users can self-authenticate without relying on a central administration function to process their information. Simultaneously, decentralized identity management ensures the user is authorized to perform actions subject to the system’s policies based on their attributes (role, department, organization, etc.) and/ or physical location. [ 10 ] Use cases [ edit ] Agriculture  – Farmers collect data on water use, soil temperature, moisture content and crop growth, augmented analytics can be used to make sense of this data and possibly identify insights that the user can then use to make business decisions. [ 11 ] Smart Cities  – Many cities across the United States, known as Smart Cities collect large amounts of data on a daily basis. Augmented analytics can be used to simplify this data in order to increase effectiveness in city management (transportation, natural disasters, etc.). [ 11 ] Analytic Dashboards  – Augmented analytics has the ability to take large data sets and create'
    )
]</code></pre>
<p>One more question from another domain.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the fundamental principles of classical mechanics?"</span></span>
<span id="cb33-2"></span>
<span id="cb33-3">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_response(query)</span>
<span id="cb33-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(answer)</span></code></pre></div>
<pre><code>I couldn't find the information.</code></pre>
<p>This question was left unanswered as expected.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we implemented a simple RAG system using a large language model and a text retrieval system. We collected articles from Wikipedia, split them into shorter chunks, and transformed them into embeddings for quick search. We then used a local LLM to generate responses based on the retrieved information. The RAG system successfully answered questions related to machine learning algorithms and reinforcement learning. The RAG system demonstrates the potential of combining retrieval and generation techniques to produce informative and contextually relevant answers.</p>
<p>Source code for this tutorial is available on <a href="https://github.com/AxesAccess/Implementing-a-Local-Retrieval-Augmented-Generation-System/blob/main/Implementing_a_Local_Retrieval_Augmented_Generation_System.ipynb">GitHub</a>.</p>


</section>

 ]]></description>
  <category>RAG</category>
  <category>NLP</category>
  <category>LLM</category>
  <category>Python</category>
  <guid>https://blog.frequentist.org/posts/20250321-rag/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://blog.frequentist.org/posts/20250321-rag/image.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Nerdy Valentine’s in Python, R, and Matlab</title>
  <dc:creator>Aleksei </dc:creator>
  <link>https://blog.frequentist.org/posts/20250214-valentines/</link>
  <description><![CDATA[ 





<p>Let’s celebrate Valentine’s Day with some nerdy love! In this post, we will create heart-shaped plots using Python, R, and Matlab. These heart-shaped plots are a fun and creative way to express your love for programming and data visualization. Let’s get started!</p>
<section id="python" class="level2">
<h2 class="anchored" data-anchor-id="python">Python</h2>
<p>Here is a Python code snippet to plot a 3D heart shape using Matplotlib:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mpl_toolkits.mplot3d <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Axes3D</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cm</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.ticker <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearLocator, FormatStrFormatter</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> heart_3d(x, y, z):</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (</span>
<span id="cb1-10">        (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-11">    )</span>
<span id="cb1-12"></span>
<span id="cb1-13"></span>
<span id="cb1-14">bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb1-15"></span>
<span id="cb1-16">xmin, xmax, ymin, ymax, zmin, zmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-17">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure()</span>
<span id="cb1-18"></span>
<span id="cb1-19">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">111</span>, projection<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3d"</span>)</span>
<span id="cb1-20">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(xmin, xmax, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># resolution of the contour</span></span>
<span id="cb1-21">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(xmin, xmax, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of slices</span></span>
<span id="cb1-22">A1, A2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(A, A)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grid on which the contour is plotted</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> z <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> B:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot contours in the XY plane</span></span>
<span id="cb1-25">    X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A1, A2</span>
<span id="cb1-26">    Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heart_3d(X, Y, z)</span>
<span id="cb1-27">    cset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.contour(X, Y, Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z, [z], zdir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>,))</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> B:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot contours in the XZ plane</span></span>
<span id="cb1-30">    X, Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A1, A2</span>
<span id="cb1-31">    Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heart_3d(X, y, Z)</span>
<span id="cb1-32">    cset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.contour(X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y, Z, [y], zdir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>,))</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> B:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot contours in the YZ plane</span></span>
<span id="cb1-35">    Y, Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A1, A2</span>
<span id="cb1-36">    X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heart_3d(x, Y, Z)</span>
<span id="cb1-37">    cset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.contour(X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x, Y, Z, [x], zdir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>,))</span>
<span id="cb1-38"></span>
<span id="cb1-39">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.set_zlim3d(zmin, zmax)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-40">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.set_xlim3d(xmin, xmax)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-41">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.set_ylim3d(ymin, ymax)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-42"></span>
<span id="cb1-43">ax.xaxis.set_pane_color((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb1-44">ax.yaxis.set_pane_color((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb1-45">ax.zaxis.set_pane_color((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb1-46"></span>
<span id="cb1-47"></span>
<span id="cb1-48">plt.show()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20250214-valentines/index_files/figure-html/py-heart-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="r" class="level2">
<h2 class="anchored" data-anchor-id="r">R</h2>
<p>In R, we can use the <code>rgl</code> and <code>misc3d</code> packages to create 3D mesh plots. Here is the R code to plot a heart shape:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rgl.useNULL =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use NULL device if display is not available</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(misc3d)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rgl)</span>
<span id="cb2-5"></span>
<span id="cb2-6">heart_3d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y, z) {</span>
<span id="cb2-7">  (x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb2-8">}</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a grid of points in 3D space</span></span>
<span id="cb2-11">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-12">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-13">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 3D grid of function values</span></span>
<span id="cb2-16">grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand.grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> z)</span>
<span id="cb2-17">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(grid, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_3d</span>(x, y, z))</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape to 3D array for contour3d</span></span>
<span id="cb2-20">dim_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(y), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(z))</span>
<span id="cb2-21">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(values, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> dim_values)</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create 3D contour plot</span></span>
<span id="cb2-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contour3d</span>(values,</span>
<span id="cb2-25">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-26">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> z, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col.mesh =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">engine =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grid"</span></span>
<span id="cb2-27">)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20250214-valentines/index_files/figure-html/unnamed-chunk-2-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="matlab" class="level2">
<h2 class="anchored" data-anchor-id="matlab">Matlab</h2>
<p>The code for plotting 3D shape in Matlab is much more laconic than in Python or R. Here is how to plot a heart shape in Matlab:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode matlab code-with-copy"><code class="sourceCode matlab"><span id="cb3-1"></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% volume data</span></span>
<span id="cb3-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">step</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4">[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Z</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">meshgrid</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">step</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">F</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.^</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% wireframe</span></span>
<span id="cb3-8"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">patch</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">isosurface</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">Z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">F</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'FaceColor'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'EdgeColor'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb3-9"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">daspect</span>([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-10"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">view</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-11"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">axis</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tight</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">equal</span></span>
<span id="cb3-12"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">set</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gcf</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'Color'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20250214-valentines/matlab-heart.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:4in"></p>
</figure>
</div>
<p>Now you have three beautiful heart-shaped plots created using Python, R, and Matlab. Share these plots with your loved ones and spread the nerdy love this Valentine’s Day!</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>R</category>
  <category>Matlab</category>
  <guid>https://blog.frequentist.org/posts/20250214-valentines/</guid>
  <pubDate>Fri, 14 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://blog.frequentist.org/posts/20250214-valentines/image.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Python Library for Russian Macroeconomics Data</title>
  <dc:creator>Aleksei </dc:creator>
  <link>https://blog.frequentist.org/posts/20240821-sophisthse/</link>
  <description><![CDATA[ 





<p>The article introduces a Python library called <code>sophisthse</code> that provides access to Russian macroeconomic statistics time series published by the National Research University Higher School of Economics (HSE). The library aims to simplify the process of working with Russian macroeconomic data and facilitate the analysis of economic trends in the country. The article demonstrates how to use the library to list available time series, download data, and visualize the time series data.</p>
<p><img src="https://blog.frequentist.org/posts/20240821-sophisthse/banner.png" class="img-fluid"></p>
<section id="acknowledgments" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgments">Acknowledgments</h2>
<p>The library is a port of the <code>sophisthse</code> R package developed by <a href="https://github.com/bdemeshev">Boris Demeshev</a>. The original package provides similar functionality for working with Russian macroeconomic data in R. The Python version of the library is designed to offer the same features to Python users interested in analyzing Russian economic indicators.</p>
</section>
<section id="source-data" class="level2">
<h2 class="anchored" data-anchor-id="source-data">Source Data</h2>
<p>The <a href="http://sophist.hse.ru/hse/nindex.shtml">sophist.hse.ru</a> website contains wide range of Russian macroeconomic statistics time series, including data on GDP, inflation, unemployment, industrial production, retail sales, and more. The data is originally sourced from the Federal State Statistics Service of the Russian Federation (Rosstat) and other official sources.</p>
</section>
<section id="features" class="level2">
<h2 class="anchored" data-anchor-id="features">Features</h2>
<p>The <code>sophisthse</code> library provides the following features:</p>
<ul>
<li>Listing available tables with time series data</li>
<li>Downloading and caching time series data</li>
</ul>
</section>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>You can install the library using <code>pip</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install sophisthse</span></code></pre></div>
</section>
<section id="usage" class="level2">
<h2 class="anchored" data-anchor-id="usage">Usage</h2>
<p>Here is an example of how to use the library to download and plot the time series data.</p>
<section id="list-available-time-series" class="level3">
<h3 class="anchored" data-anchor-id="list-available-time-series">List Available Time Series</h3>
<p>Time series are published on the <a href="http://sophist.hse.ru/hse/nindex.shtml">sophist.hse.ru</a> website. Initializing <code>sophisthse</code> class will download the list of available tables. You can list the available tables using the <code>list_tables</code> method:</p>
<div id="128ddfa2" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sophisthse <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sophisthse</span>
<span id="cb2-2"></span>
<span id="cb2-3">sph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sophisthse()</span>
<span id="cb2-4">tables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sph.list_tables()</span>
<span id="cb2-5">tables</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">name</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2020-05-27 15:46:00</td>
<td>AGR_M_I - Copy</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2024-08-08 09:10:00</td>
<td>AGR_M_I</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2024-08-08 09:10:00</td>
<td>AGR_Q_I</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2024-02-11 19:10:00</td>
<td>AGR_Y_DIRI</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2024-07-26 20:04:00</td>
<td>APCI3N</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284</td>
<td>2010-03-29 12:57:00</td>
<td>vrp</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">285</td>
<td>2010-03-30 12:41:00</td>
<td>vrp_r</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">286</td>
<td>2024-08-08 09:12:00</td>
<td>WAG_M</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">287</td>
<td>2024-06-07 15:03:00</td>
<td>WAG_Q</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">288</td>
<td>2024-03-13 19:36:00</td>
<td>WAG_Y</td>
</tr>
</tbody>
</table>

<p>289 rows × 2 columns</p>
</div>
</div>
</div>
<p>The column named <code>date</code> contains timestamp of the latest update. The dates in this column hint that some tables may be out of date. Let’s take a look at the date of the latest update of the tables.</p>
<div id="f0589363" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">tables[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tables[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>].dt.year</span>
<span id="cb3-2">tables.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>).size().plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20240821-sophisthse/index_files/figure-html/cell-4-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="575" height="450"></p>
</figure>
</div>
</div>
</div>
<p>The 116 out of 289 are being updated through 2024. Let’s take a look at the most recently updated tables.</p>
<div id="67ee61c6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">tables[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tables[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>].dt.date</span>
<span id="cb4-2">(</span>
<span id="cb4-3">    tables.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>)</span>
<span id="cb4-4">    .agg({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>.join(x)})</span>
<span id="cb4-5">    .reset_index()</span>
<span id="cb4-6">    .sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-7">    .head()</span>
<span id="cb4-8">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">name</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">38</td>
<td>2024-08-08</td>
<td>AGR_M_I, AGR_Q_I, BBR_EA2_M_I, BBR_EA2_Q_I, CN...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">37</td>
<td>2024-07-26</td>
<td>APCI3N, BMPM3N, CCPM3N, CPPNF3N, ECOG3N, EMAM3...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">36</td>
<td>2024-06-07</td>
<td>WAG_Q</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">35</td>
<td>2024-06-06</td>
<td>GOV_Q, M_Q</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">34</td>
<td>2024-04-05</td>
<td>INVFC_Q, INVFC_Q_I</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="download-and-plot-time-series" class="level3">
<h3 class="anchored" data-anchor-id="download-and-plot-time-series">Download and Plot Time Series</h3>
<p>According to the <a href="http://sophist.hse.ru/hse/nindex.shtml">sophist.hse.ru</a> website table <code>AGR_M_I</code> provides the index of real agricultural production in column <code>AGR_M_DIRI</code>, and seasonally adjusted one in the <code>AGR_M_DIRI_SA</code>. Let’s download it and take a look at the data.</p>
<div id="e4063bc9" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">agr_m_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sph.get_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AGR_M_I"</span>)</span>
<span id="cb5-2">agr_m_i.tail()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">AGR_M_DIRI</th>
<th data-quarto-table-cell-role="th">AGR_M_DIRI_SA</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">T</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2024-02</td>
<td>110.0</td>
<td>353.3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2024-03</td>
<td>169.6</td>
<td>355.7</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2024-04</td>
<td>190.3</td>
<td>357.2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2024-05</td>
<td>208.4</td>
<td>358.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2024-06</td>
<td>213.2</td>
<td>358.5</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>After calling <code>get_table</code>, the data is cached locally. The next time <code>get_table</code> is called, the data will be loaded from the cache. However, if the table is updated on the server, which is checked when the <code>sophisthse</code> class is initialized, the new data will be loaded from the website.</p>
</div>
</div>
<p>The method returns a pandas DataFrame, so we can plot the data using the <code>plot</code> method.</p>
<div id="a1b24d9f" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">agr_m_i.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20240821-sophisthse/index_files/figure-html/cell-7-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="593" height="429"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="additional-example" class="level3">
<h3 class="anchored" data-anchor-id="additional-example">Additional Example</h3>
<p>According to the <a href="http://sophist.hse.ru/hse/nindex.shtml">sophist.hse.ru</a> website table <code>FINMAR_M</code> contains data on the financial market.</p>
<div id="51ffa3ad" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">finmar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sph.get_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FINMAR_M"</span>)</span>
<span id="cb7-2">finmar.tail()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">RDEXRO_M</th>
<th data-quarto-table-cell-role="th">RDEXRM_M</th>
<th data-quarto-table-cell-role="th">RTS_M</th>
<th data-quarto-table-cell-role="th">IB_M</th>
<th data-quarto-table-cell-role="th">GKO_M</th>
<th data-quarto-table-cell-role="th">DEP_M</th>
<th data-quarto-table-cell-role="th">CR_M</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">T</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2024-03</td>
<td>92.37</td>
<td>92.35</td>
<td>1131.21</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2024-04</td>
<td>91.78</td>
<td>93.05</td>
<td>1165.23</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2024-05</td>
<td>89.79</td>
<td>90.05</td>
<td>1185.57</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2024-06</td>
<td>85.75</td>
<td>85.75</td>
<td>1134.30</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2024-07</td>
<td>86.33</td>
<td>86.11</td>
<td>1092.61</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The first columns are:</p>
<ul>
<li><code>RDEXRO_M</code> - Official exchange rate of the ruble against the US dollar.</li>
<li><code>RDEXRM_M</code> - Exchange rate of the US dollar on the Moscow Exchange.</li>
<li><code>RTS_M</code> - Average <a href="https://en.wikipedia.org/wiki/RTS_Index">RTS index</a>.</li>
</ul>
<p>The last four columns show NaNs for the most recent periods. Let’s take a look at the missing values.</p>
<div id="65d5b75f" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">sns.heatmap(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>finmar.isnull(), cbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blues"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20240821-sophisthse/index_files/figure-html/cell-9-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="623" height="480"></p>
</figure>
</div>
</div>
</div>
<p>The heatmap shows that the data in the <code>IB_M</code>, <code>GKO_M</code>, <code>DEP_M</code>, and <code>CR_M</code> columns is not available for the recent years, while the <code>RDEXRO_M</code>, <code>RDEXRM_M</code>, and <code>RTS_M</code> columns have complete data.</p>
<p>Let’s plot the <code>RTS_M</code> column. Due to the economic fluctuations, the RTS index has a lot of volatility. We will add the moving average to the plot.</p>
<div id="0d3f3f2f" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">finmar[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RTS_M"</span>].plot(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RTS index"</span>)</span>
<span id="cb9-2">finmar[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RTS_M"</span>].rolling(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, center<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).mean().plot(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12-months MA"</span>)</span>
<span id="cb9-3">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20240821-sophisthse/index_files/figure-html/cell-10-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="592" height="429"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="further-investigation" class="level2">
<h2 class="anchored" data-anchor-id="further-investigation">Further Investigation</h2>
<p>Looking at the tables, one can assume that the suffixes <code>_M</code>, <code>_Q</code> and <code>_Y</code> in the names mean that the data was sampled monthly, quarterly and annually, respectively. Let’s check this assumption.</p>
<div id="df7c7284" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> guess_period(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb10-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_M"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> name:</span>
<span id="cb10-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span></span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_Q"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> name:</span>
<span id="cb10-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quarter"</span></span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_Y"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> name:</span>
<span id="cb10-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span></span>
<span id="cb10-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unknown"</span></span>
<span id="cb10-9"></span>
<span id="cb10-10"></span>
<span id="cb10-11">tables[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tables[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(guess_period)</span>
<span id="cb10-12"></span>
<span id="cb10-13">tables.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period"</span>).size().plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20240821-sophisthse/index_files/figure-html/cell-11-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="575" height="477"></p>
</figure>
</div>
</div>
</div>
<p>The bar plot shows that the assumption is partially correct. There are tables with unknown sampling frequency. This information can be drawn from the actual series after downloading data. It’s not necessary for demonstrative purposes, so we will skip this step.</p>
<p>Let’s calculate the correlation matrix for the monthly data.</p>
<div id="64b1af90" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> time <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sleep</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb11-4"></span>
<span id="cb11-5"></span>
<span id="cb11-6">monthly_tables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tables.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"period == 'month' &amp; year &gt;= 2023"</span>)</span>
<span id="cb11-7"></span>
<span id="cb11-8">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pd.period_range(start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2014-01-01"</span>, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-01-01"</span>, freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>))</span>
<span id="cb11-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> table <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> monthly_tables[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>]:</span>
<span id="cb11-10">    df_add <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sph.get_table(table)</span>
<span id="cb11-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We don't want to overload the server</span></span>
<span id="cb11-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sleep(randint(1, 3))</span></span>
<span id="cb11-13">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.merge(df_add, left_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, right_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We do not want to deal with NaNs, at least at this time :)</span></span>
<span id="cb11-16">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.dropna(how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-17"></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only columns with "_M" suffix to skip derived columns</span></span>
<span id="cb11-19">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [col <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.columns <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_M"</span>)]</span>
<span id="cb11-20"></span>
<span id="cb11-21">corr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[columns].corr()</span>
<span id="cb11-22"></span>
<span id="cb11-23">sns.heatmap(</span>
<span id="cb11-24">    corr,</span>
<span id="cb11-25">    vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,</span>
<span id="cb11-26">    vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,</span>
<span id="cb11-27">    xticklabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>corr.columns.values,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># type: ignore</span></span>
<span id="cb11-28">    yticklabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>corr.columns.values,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># type: ignore</span></span>
<span id="cb11-29">    cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coolwarm"</span>,</span>
<span id="cb11-30">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20240821-sophisthse/index_files/figure-html/cell-12-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="622" height="485"></p>
</figure>
</div>
</div>
</div>
<p>The last column (or row) is the <code>WAG_C_M</code>. This is a monthly series of the average nominal wage. It correlates with many economics indicators, and it worth noting that <code>CBEX_M</code> (Consolidated Budget Expenditures) explains almost 84% of <code>WAG_C_M</code> variability. Let’s take a look at these two series.</p>
<div id="e67a6209" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[columns].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x.mean()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> x.std())</span>
<span id="cb12-2">df_norm[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WAG_C_M"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CBEX_M"</span>]].plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20240821-sophisthse/index_files/figure-html/cell-13-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="569" height="411"></p>
</figure>
</div>
</div>
</div>
<p>The plot shows that the <code>WAG_C_M</code> series follows the <code>CBEX_M</code> series with great accuracy. This is an interesting observation that can be used in further analysis.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>The <code>sophisthse</code> library provides a convenient way to access and work with Russian macroeconomic time series data. The library simplifies the process of downloading and caching data, making it easier to analyze economic trends in Russia. The library is a valuable resource for researchers, analysts, and anyone interested in studying the Russian economy.</p>


</section>

 ]]></description>
  <category>Time-Series</category>
  <category>Macroeconomics</category>
  <category>Python</category>
  <guid>https://blog.frequentist.org/posts/20240821-sophisthse/</guid>
  <pubDate>Thu, 22 Aug 2024 00:00:00 GMT</pubDate>
  <media:content url="https://blog.frequentist.org/posts/20240821-sophisthse/image.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Kano Method for Prioritization of Features</title>
  <dc:creator>Aleksei </dc:creator>
  <link>https://blog.frequentist.org/posts/20240805-kano-model/</link>
  <description><![CDATA[ 





<p>The Kano model is a theory for product development and customer satisfaction developed in the 1980s by Professor Noriaki Kano. The model classifies customer preferences into five categories: Must-be Quality, One-dimensional Quality, Attractive Quality, Indifferent Quality, and Reverse Quality. The Kano model is used to prioritize features and functionalities in product development based on customer needs and expectations.</p>
<p><img src="https://blog.frequentist.org/posts/20240805-kano-model/features.jpg" class="img-fluid"></p>
<section id="categories-of-the-kano-model" class="level2">
<h2 class="anchored" data-anchor-id="categories-of-the-kano-model">Categories of the Kano Model</h2>
<p><strong>Must-be</strong> features are basic requirements that customers expect. If these features are not present in a product, customers will be dissatisfied. However, the presence of these features does not necessarily lead to customer satisfaction. Must-be Quality features are considered essential for the product.</p>
<blockquote class="blockquote">
<p>Examples: a car must have wheels, a smartphone must have a battery, a website must have a search function.</p>
</blockquote>
<p><strong>One-dimensional</strong> features are directly proportional to customer satisfaction. The more these features are present in a product, the more satisfied customers will be. These features are usually explicitly stated by customers and are easy to measure and quantify.</p>
<blockquote class="blockquote">
<p>Examples: a car with leather seats, a smartphone with a high-resolution camera, a website with fast loading times.</p>
</blockquote>
<p><strong>Attractive</strong> features are unexpected features that delight customers. These features are not explicitly requested by customers but can create a positive emotional response when present. Attractive Quality features can differentiate a product from its competitors and create a competitive advantage.</p>
<blockquote class="blockquote">
<p>Examples: a car with a built-in navigation system, a smartphone with facial recognition technology, a website with personalized recommendations.</p>
</blockquote>
<p><strong>Indifferent</strong> features are neither good nor bad from the customer’s perspective. Customers are indifferent to these features, and their presence or absence does not significantly impact customer satisfaction. These features are often considered “nice to have” but not essential.</p>
<blockquote class="blockquote">
<p>Examples: a car with cup holders, a smartphone with a stylus, a website with social media integration.</p>
</blockquote>
<p><strong>Reverse</strong> features are features that, when present, can lead to customer dissatisfaction. These features may be perceived as unnecessary or even annoying by customers. It is essential to identify and eliminate Reverse Quality features to prevent negative customer experiences.</p>
<blockquote class="blockquote">
<p>Examples: a car with uncomfortable seats, a smartphone with a short battery life, a website with intrusive pop-up ads.</p>
</blockquote>
</section>
<section id="prioritizing-features-with-the-kano-model" class="level2">
<h2 class="anchored" data-anchor-id="prioritizing-features-with-the-kano-model">Prioritizing Features with the Kano Model</h2>
<div id="fig-kano-example" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-kano-example-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blog.frequentist.org/posts/20240805-kano-model/image.png" class="img-fluid figure-img" style="width:50.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-kano-example-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Example of a Kano diagram.
</figcaption>
</figure>
</div>
<p>With the Kano model, prioritization of features and functionalities becomes clear and straightforward as that:</p>
<p><strong>a)</strong> keep eye on the <em>Must-be Quality</em> features, as they are essential, <strong>b)</strong> incorporate <em>One-dimensional Quality</em> features to increase customer satisfaction, <strong>c)</strong> consider <em>Attractive Quality</em> features to create a competitive advantage; <strong>d)</strong> eliminate <em>Reverse Quality</em> features, and <strong>e)</strong> save resources by setting <em>Indifferent Quality</em> features as low priority.</p>
</section>
<section id="implementation-of-the-kano-analysis" class="level2">
<h2 class="anchored" data-anchor-id="implementation-of-the-kano-analysis">Implementation of the Kano Analysis</h2>
<p>Implementing the Kano model involves a sequence of steps, beginning with the development of a questionnaire. For each feature, two types of questions are posed: functional and dysfunctional.</p>
<ul>
<li>The <strong>functional question</strong> assesses respondents’ feelings when a feature is present.</li>
<li>The <strong>dysfunctional question</strong> gauges their reactions in the absence of that feature.</li>
</ul>
<p>Each question offers five possible responses, from “I like it” to “I dislike it.” Subsequently, these responses are classified into the five Kano categories.</p>
<div class="cell" data-execution_count="1" data-cap-location="undefined" data-tbl-cap-location="top">
<div id="tbl-cap-margin" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-tbl-cap-location="top" data-cap-location="undefined" data-execution_count="1">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-cap-margin-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: Classification of answers to the Kano questionnaire.
</figcaption>
<div aria-describedby="tbl-cap-margin-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe do-not-create-environment cell caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th colspan="5" data-quarto-table-cell-role="th" data-halign="left">Category</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">Dysfunctional</th>
<th data-quarto-table-cell-role="th">1) I like it</th>
<th data-quarto-table-cell-role="th">2) I expect it</th>
<th data-quarto-table-cell-role="th">3) I am neutral</th>
<th data-quarto-table-cell-role="th">4) I can tolerate it</th>
<th data-quarto-table-cell-role="th">5) I dislike it</th>
</tr>
<tr class="header">
<th data-quarto-table-cell-role="th">Functional</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1) I like it</td>
<td>Questionable</td>
<td>Attractive</td>
<td>Attractive</td>
<td>Attractive</td>
<td>One-dimensional</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2) I expect it</td>
<td>Reverse</td>
<td>Indifferent</td>
<td>Indifferent</td>
<td>Indifferent</td>
<td>Must-be</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3) I am neutral</td>
<td>Reverse</td>
<td>Indifferent</td>
<td>Indifferent</td>
<td>Indifferent</td>
<td>Must-be</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4) I can tolerate it</td>
<td>Reverse</td>
<td>Indifferent</td>
<td>Indifferent</td>
<td>Indifferent</td>
<td>Must-be</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5) I dislike it</td>
<td>Reverse</td>
<td>Reverse</td>
<td>Reverse</td>
<td>Reverse</td>
<td>Questionable</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</figure>
</div>
</div>
<p>After the classification of responses, the next step is to calculate the satisfaction and dissatisfaction scores for each feature. The satisfaction influence score is calculated as the percentage of Attractive and One-dimensional responses relative to the total number of responses.</p>
<p><span id="eq-satisfaction-influence"><img src="https://latex.codecogs.com/png.latex?%20%5Ctext%7BSatisfaction%20Influence%7D%20=%20%5Cdfrac%7BA%20+%20O%7D%7B%20A%20+%20O%20+%20M%20+%20I%20%7D%20%5Ctimes%20100%20%5C%25%20%20%5Ctag%7B1%7D"></span> The dissatisfaction influence score is calculated as the percentage of One-dimensional and Must-be responses relative to the total number of responses.</p>
<p><span id="eq-dissatisfaction-influence"><img src="https://latex.codecogs.com/png.latex?%20%5Ctext%7BDissatisfaction%20Influence%7D%20=%20%20-%20%5Cdfrac%7BO%20+%20M%7D%7BA%20+%20O%20+%20M%20+%20I%7D%20%5Ctimes%20100%20%5C%25%20%20%5Ctag%7B2%7D"></span></p>
<p>The features are then plotted on a Kano diagram, with the dissatisfaction score on the x-axis and the satisfaction score on the y-axis. The features are categorized based on their position in the diagram: Attractive Quality features in the upper left quadrant, One-dimensional Quality features in the upper right quadrant, Must-be Quality features in the lower right quadrant, and Indifferent features in the lower left quadrant, as depicted in the Figure&nbsp;1.</p>
</section>
<section id="example-implementation-of-the-kano-analysis" class="level2">
<h2 class="anchored" data-anchor-id="example-implementation-of-the-kano-analysis">Example implementation of the Kano Analysis</h2>
<section id="conducting-a-kano-survey" class="level3">
<h3 class="anchored" data-anchor-id="conducting-a-kano-survey">Conducting a Kano Survey</h3>
<p>For illustrative purposes, let’s consider existing dataset with responses to a Kano questionnaire from <a href="https://github.com/REPPL/Doing-research-online-the-kano-model">Doing Research Online: The Kano Model</a> project by <a href="https://github.com/REPPL">Alex Reppel</a> published on GitHub under the GPL-3.0 License. The dataset consists of five csv files containing responses to functional and dysfunctional questions for various features, along with demographic information about the respondents.</p>
</section>
<section id="exploratory-data-analysis" class="level3">
<h3 class="anchored" data-anchor-id="exploratory-data-analysis">Exploratory Data Analysis</h3>
<p>Let’s explore data. The dataframe of shape (721, 39) includes an <code>ID</code> column, multiple columns with demographic data such as <code>Income_us</code>, <code>Gender</code>, <code>Age</code>, <code>Employment</code>, and <code>Education</code>, as well as responses to functional and dysfunctional questions (<code>F1_functional</code>, <code>F1_dysfunctional</code>, etc), and columns indicating the importance of certain features to the customer (<code>F1_importance</code>, <code>F2_importance</code>, etc).</p>
<div id="cell-fig-hist-age" class="cell" data-execution_count="3">
<div class="cell-output cell-output-display">
<div id="fig-hist-age" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-hist-age-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blog.frequentist.org/posts/20240805-kano-model/index_files/figure-html/fig-hist-age-output-1.png" width="661" height="468" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-hist-age-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Histogram of respondents’ age
</figcaption>
</figure>
</div>
</div>
</div>
<p>The customers’ age distribution is relatively balanced, with a slight skew towards younger respondents.</p>
<div>

</div>
<div id="cell-fig-income-empl-hist" class="cell quarto-layout-panel" data-layout-ncol="2" data-execution_count="4">
<div class="quarto-layout-row">
<div class="cell-output cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-income-empl-hist" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-income-empl-hist-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blog.frequentist.org/posts/20240805-kano-model/index_files/figure-html/fig-income-empl-hist-output-1.png" width="352" height="488" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-income-empl-hist-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Income distribution
</figcaption>
</figure>
</div>
</div>
<div class="cell-output cell-output-display quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-income-empl-hist" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-income-empl-hist-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blog.frequentist.org/posts/20240805-kano-model/index_files/figure-html/fig-income-empl-hist-output-2.png" width="352" height="509" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-income-empl-hist-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Employment distribution
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The income distribution is expectedly skewed to the left. The employment distribution shows that the majority of respondents are employed full-time.</p>
<p>While customer responses might vary based on demographic data, Kano analysis does not consider the demographic characteristics of the respondents.</p>
</section>
<section id="aggregating-responses" class="level3">
<h3 class="anchored" data-anchor-id="aggregating-responses">Aggregating Responses</h3>
<p>Next, we will aggregate the responses to functional and dysfunctional questions for each feature. The table below shows an example of aggregated answers for a feature with ID = F1.</p>
<div class="cell" data-tbl-colwidths="[5,20,15,15,15,15,15]" data-execution_count="9">
<div id="tbl-agg-answers" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-execution_count="9" data-tbl-colwidths="[5,20,15,15,15,15,15]">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-agg-answers-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;2: Example of aggregated answers for a feature.
</figcaption>
<div aria-describedby="tbl-agg-answers-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe do-not-create-environment cell caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Dysfunctional</th>
<th data-quarto-table-cell-role="th">1) I like it</th>
<th data-quarto-table-cell-role="th">2) I expect it</th>
<th data-quarto-table-cell-role="th">3) I am neutral</th>
<th data-quarto-table-cell-role="th">4) I can tolerate it</th>
<th data-quarto-table-cell-role="th">5) I dislike it</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">ID</th>
<th data-quarto-table-cell-role="th">Functional</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td rowspan="5" data-quarto-table-cell-role="th" data-valign="top">F1_</td>
<td data-quarto-table-cell-role="th">1) I like it</td>
<td>12</td>
<td>10</td>
<td>21</td>
<td>25</td>
<td>9</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2) I expect it</td>
<td>6</td>
<td>6</td>
<td>14</td>
<td>10</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3) I am neutral</td>
<td>15</td>
<td>25</td>
<td>72</td>
<td>29</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4) I can tolerate it</td>
<td>5</td>
<td>13</td>
<td>12</td>
<td>10</td>
<td>5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5) I dislike it</td>
<td>14</td>
<td>8</td>
<td>4</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</figure>
</div>
</div>
</section>
<section id="calculating-satisfaction-and-dissatisfaction-scores" class="level3">
<h3 class="anchored" data-anchor-id="calculating-satisfaction-and-dissatisfaction-scores">Calculating Satisfaction and Dissatisfaction Scores</h3>
<p>After aggregating the responses, we calculate the satisfaction and dissatisfaction scores for each feature using Equation&nbsp;1 and Equation&nbsp;2. The table below shows the qualities: Attractive (<strong>A</strong>), Indifferent (<strong>I</strong>), Must-be (<strong>M</strong>), One-dimensional (<strong>O</strong>), Questionable (<strong>Q</strong>), Reverse (<strong>R</strong>), as well as satisfaction (<strong>S</strong>) and dissatisfaction (<strong>D</strong>) scores for each feature.</p>
<div class="cell" data-tbl-align="center" data-execution_count="10">
<div id="tbl-scores" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-execution_count="10" data-tbl-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-scores-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;3: Qualities and satisfaction and dissatisfaction scores for each feature.
</figcaption>
<div aria-describedby="tbl-scores-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output cell-output-display" data-execution_count="10">
<style type="text/css">
#T_1e201_row0_col3, #T_1e201_row1_col5, #T_1e201_row2_col5, #T_1e201_row3_col5, #T_1e201_row4_col3, #T_1e201_row5_col3, #T_1e201_row6_col5, #T_1e201_row7_col5, #T_1e201_row8_col2, #T_1e201_row9_col5, #T_1e201_row10_col3 {
  background-color: lightgreen;
}
</style>

<table id="T_1e201" class="do-not-create-environment cell caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th class="blank level0" data-quarto-table-cell-role="th">&nbsp;</th>
<th id="T_1e201_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">ID</th>
<th id="T_1e201_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">Question</th>
<th id="T_1e201_level0_col2" class="col_heading level0 col2" data-quarto-table-cell-role="th">A</th>
<th id="T_1e201_level0_col3" class="col_heading level0 col3" data-quarto-table-cell-role="th">I</th>
<th id="T_1e201_level0_col4" class="col_heading level0 col4" data-quarto-table-cell-role="th">M</th>
<th id="T_1e201_level0_col5" class="col_heading level0 col5" data-quarto-table-cell-role="th">O</th>
<th id="T_1e201_level0_col6" class="col_heading level0 col6" data-quarto-table-cell-role="th">Q</th>
<th id="T_1e201_level0_col7" class="col_heading level0 col7" data-quarto-table-cell-role="th">R</th>
<th id="T_1e201_level0_col8" class="col_heading level0 col8" data-quarto-table-cell-role="th">S</th>
<th id="T_1e201_level0_col9" class="col_heading level0 col9" data-quarto-table-cell-role="th">D</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td id="T_1e201_level0_row0" class="row_heading level0 row0" data-quarto-table-cell-role="th">0</td>
<td id="T_1e201_row0_col0" class="data row0 col0">F1</td>
<td id="T_1e201_row0_col1" class="data row0 col1">If your funds are stored in a way that does not have to be linked to your identity, how do you feel?</td>
<td id="T_1e201_row0_col2" class="data row0 col2">17</td>
<td id="T_1e201_row0_col3" class="data row0 col3">57</td>
<td id="T_1e201_row0_col4" class="data row0 col4">3</td>
<td id="T_1e201_row0_col5" class="data row0 col5">3</td>
<td id="T_1e201_row0_col6" class="data row0 col6">4</td>
<td id="T_1e201_row0_col7" class="data row0 col7">16</td>
<td id="T_1e201_row0_col8" class="data row0 col8">24</td>
<td id="T_1e201_row0_col9" class="data row0 col9">-7</td>
</tr>
<tr class="even">
<td id="T_1e201_level0_row1" class="row_heading level0 row1" data-quarto-table-cell-role="th">1</td>
<td id="T_1e201_row1_col0" class="data row1 col0">F2</td>
<td id="T_1e201_row1_col1" class="data row1 col1">If it is easy to store funds, how do you feel?</td>
<td id="T_1e201_row1_col2" class="data row1 col2">22</td>
<td id="T_1e201_row1_col3" class="data row1 col3">27</td>
<td id="T_1e201_row1_col4" class="data row1 col4">14</td>
<td id="T_1e201_row1_col5" class="data row1 col5">30</td>
<td id="T_1e201_row1_col6" class="data row1 col6">3</td>
<td id="T_1e201_row1_col7" class="data row1 col7">4</td>
<td id="T_1e201_row1_col8" class="data row1 col8">56</td>
<td id="T_1e201_row1_col9" class="data row1 col9">-48</td>
</tr>
<tr class="odd">
<td id="T_1e201_level0_row2" class="row_heading level0 row2" data-quarto-table-cell-role="th">2</td>
<td id="T_1e201_row2_col0" class="data row2 col0">F3</td>
<td id="T_1e201_row2_col1" class="data row2 col1">If you can access your funds wherever and whenever you want, how do you feel?</td>
<td id="T_1e201_row2_col2" class="data row2 col2">15</td>
<td id="T_1e201_row2_col3" class="data row2 col3">18</td>
<td id="T_1e201_row2_col4" class="data row2 col4">14</td>
<td id="T_1e201_row2_col5" class="data row2 col5">47</td>
<td id="T_1e201_row2_col6" class="data row2 col6">3</td>
<td id="T_1e201_row2_col7" class="data row2 col7">3</td>
<td id="T_1e201_row2_col8" class="data row2 col8">66</td>
<td id="T_1e201_row2_col9" class="data row2 col9">-65</td>
</tr>
<tr class="even">
<td id="T_1e201_level0_row3" class="row_heading level0 row3" data-quarto-table-cell-role="th">3</td>
<td id="T_1e201_row3_col0" class="data row3 col0">F4</td>
<td id="T_1e201_row3_col1" class="data row3 col1">If it is guaranteed that no one else can access your funds without your permission, how do you feel?</td>
<td id="T_1e201_row3_col2" class="data row3 col2">5</td>
<td id="T_1e201_row3_col3" class="data row3 col3">12</td>
<td id="T_1e201_row3_col4" class="data row3 col4">22</td>
<td id="T_1e201_row3_col5" class="data row3 col5">53</td>
<td id="T_1e201_row3_col6" class="data row3 col6">4</td>
<td id="T_1e201_row3_col7" class="data row3 col7">4</td>
<td id="T_1e201_row3_col8" class="data row3 col8">63</td>
<td id="T_1e201_row3_col9" class="data row3 col9">-82</td>
</tr>
<tr class="odd">
<td id="T_1e201_level0_row4" class="row_heading level0 row4" data-quarto-table-cell-role="th">4</td>
<td id="T_1e201_row4_col0" class="data row4 col0">F5</td>
<td id="T_1e201_row4_col1" class="data row4 col1">If relevant information is always easy to find, how do you feel?</td>
<td id="T_1e201_row4_col2" class="data row4 col2">22</td>
<td id="T_1e201_row4_col3" class="data row4 col3">34</td>
<td id="T_1e201_row4_col4" class="data row4 col4">12</td>
<td id="T_1e201_row4_col5" class="data row4 col5">21</td>
<td id="T_1e201_row4_col6" class="data row4 col6">5</td>
<td id="T_1e201_row4_col7" class="data row4 col7">6</td>
<td id="T_1e201_row4_col8" class="data row4 col8">49</td>
<td id="T_1e201_row4_col9" class="data row4 col9">-37</td>
</tr>
<tr class="even">
<td id="T_1e201_level0_row5" class="row_heading level0 row5" data-quarto-table-cell-role="th">5</td>
<td id="T_1e201_row5_col0" class="data row5 col0">F6</td>
<td id="T_1e201_row5_col1" class="data row5 col1">If you can transfer funds without having to link that transaction to your name, how do you feel?</td>
<td id="T_1e201_row5_col2" class="data row5 col2">26</td>
<td id="T_1e201_row5_col3" class="data row5 col3">50</td>
<td id="T_1e201_row5_col4" class="data row5 col4">2</td>
<td id="T_1e201_row5_col5" class="data row5 col5">5</td>
<td id="T_1e201_row5_col6" class="data row5 col6">4</td>
<td id="T_1e201_row5_col7" class="data row5 col7">14</td>
<td id="T_1e201_row5_col8" class="data row5 col8">38</td>
<td id="T_1e201_row5_col9" class="data row5 col9">-8</td>
</tr>
<tr class="odd">
<td id="T_1e201_level0_row6" class="row_heading level0 row6" data-quarto-table-cell-role="th">6</td>
<td id="T_1e201_row6_col0" class="data row6 col0">F7</td>
<td id="T_1e201_row6_col1" class="data row6 col1">If it is easy to transfer funds, how do you feel?</td>
<td id="T_1e201_row6_col2" class="data row6 col2">20</td>
<td id="T_1e201_row6_col3" class="data row6 col3">24</td>
<td id="T_1e201_row6_col4" class="data row6 col4">17</td>
<td id="T_1e201_row6_col5" class="data row6 col5">34</td>
<td id="T_1e201_row6_col6" class="data row6 col6">4</td>
<td id="T_1e201_row6_col7" class="data row6 col7">2</td>
<td id="T_1e201_row6_col8" class="data row6 col8">57</td>
<td id="T_1e201_row6_col9" class="data row6 col9">-54</td>
</tr>
<tr class="even">
<td id="T_1e201_level0_row7" class="row_heading level0 row7" data-quarto-table-cell-role="th">7</td>
<td id="T_1e201_row7_col0" class="data row7 col0">F8</td>
<td id="T_1e201_row7_col1" class="data row7 col1">If you can transfer your funds wherever and whenever you want, how do you feel?</td>
<td id="T_1e201_row7_col2" class="data row7 col2">21</td>
<td id="T_1e201_row7_col3" class="data row7 col3">20</td>
<td id="T_1e201_row7_col4" class="data row7 col4">18</td>
<td id="T_1e201_row7_col5" class="data row7 col5">35</td>
<td id="T_1e201_row7_col6" class="data row7 col6">4</td>
<td id="T_1e201_row7_col7" class="data row7 col7">2</td>
<td id="T_1e201_row7_col8" class="data row7 col8">60</td>
<td id="T_1e201_row7_col9" class="data row7 col9">-56</td>
</tr>
<tr class="odd">
<td id="T_1e201_level0_row8" class="row_heading level0 row8" data-quarto-table-cell-role="th">8</td>
<td id="T_1e201_row8_col0" class="data row8 col0">F9</td>
<td id="T_1e201_row8_col1" class="data row8 col1">If funds are transferred almost instantaneous, how do you feel?</td>
<td id="T_1e201_row8_col2" class="data row8 col2">40</td>
<td id="T_1e201_row8_col3" class="data row8 col3">23</td>
<td id="T_1e201_row8_col4" class="data row8 col4">7</td>
<td id="T_1e201_row8_col5" class="data row8 col5">22</td>
<td id="T_1e201_row8_col6" class="data row8 col6">4</td>
<td id="T_1e201_row8_col7" class="data row8 col7">3</td>
<td id="T_1e201_row8_col8" class="data row8 col8">67</td>
<td id="T_1e201_row8_col9" class="data row8 col9">-31</td>
</tr>
<tr class="even">
<td id="T_1e201_level0_row9" class="row_heading level0 row9" data-quarto-table-cell-role="th">9</td>
<td id="T_1e201_row9_col0" class="data row9 col0">F10</td>
<td id="T_1e201_row9_col1" class="data row9 col1">If it is guaranteed that no one else can manipulate transfers you have initiated, how do you feel?</td>
<td id="T_1e201_row9_col2" class="data row9 col2">5</td>
<td id="T_1e201_row9_col3" class="data row9 col3">15</td>
<td id="T_1e201_row9_col4" class="data row9 col4">25</td>
<td id="T_1e201_row9_col5" class="data row9 col5">49</td>
<td id="T_1e201_row9_col6" class="data row9 col6">4</td>
<td id="T_1e201_row9_col7" class="data row9 col7">2</td>
<td id="T_1e201_row9_col8" class="data row9 col8">58</td>
<td id="T_1e201_row9_col9" class="data row9 col9">-79</td>
</tr>
<tr class="odd">
<td id="T_1e201_level0_row10" class="row_heading level0 row10" data-quarto-table-cell-role="th">10</td>
<td id="T_1e201_row10_col0" class="data row10 col0">F11</td>
<td id="T_1e201_row10_col1" class="data row10 col1">If relevant information on how to make transfers is always easy to find, how do you feel?</td>
<td id="T_1e201_row10_col2" class="data row10 col2">24</td>
<td id="T_1e201_row10_col3" class="data row10 col3">30</td>
<td id="T_1e201_row10_col4" class="data row10 col4">10</td>
<td id="T_1e201_row10_col5" class="data row10 col5">26</td>
<td id="T_1e201_row10_col6" class="data row10 col6">6</td>
<td id="T_1e201_row10_col7" class="data row10 col7">4</td>
<td id="T_1e201_row10_col8" class="data row10 col8">56</td>
<td id="T_1e201_row10_col9" class="data row10 col9">-40</td>
</tr>
</tbody>
</table>
</div>
</div>
</figure>
</div>
</div>
</section>
<section id="plotting-the-kano-diagram" class="level3">
<h3 class="anchored" data-anchor-id="plotting-the-kano-diagram">Plotting the Kano Diagram</h3>
<p>The last step is to plot the features on a Kano diagram. The quadrant in which the feature is located indicates a Kano category. The further the from the center, the higher the influence on satisfaction or dissatisfaction.</p>
<div id="cell-fig-kano-diagram" class="cell" data-execution_count="11">
<div class="cell-output cell-output-display">
<div id="fig-kano-diagram" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-kano-diagram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blog.frequentist.org/posts/20240805-kano-model/index_files/figure-html/fig-kano-diagram-output-1.png" class="quarto-figure quarto-figure-center figure-img" width="627" height="508">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-kano-diagram-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Kano diagram
</figcaption>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="application-of-the-kano-model" class="level2">
<h2 class="anchored" data-anchor-id="application-of-the-kano-model">Application of the Kano Model</h2>
<p>The Kano model can be applied in product development to prioritize features and functionalities based on customer needs and expectations. By categorizing features into the five Kano categories, product managers can identify which features are essential, which are nice to have, and which can create a competitive advantage.</p>
<p>The Kano model can also help product managers understand customer preferences and make informed decisions about resource allocation and product development. By focusing on Must-be Quality and One-dimensional Quality features, product managers can ensure that the product meets basic customer requirements and maximizes customer satisfaction.</p>
<p>In conclusion, the Kano model is a valuable tool for prioritizing features and functionalities in product development. By understanding customer preferences and categorizing features into the five Kano categories, product managers can create products that meet customer needs and expectations, leading to higher customer satisfaction and competitive advantage.</p>


</section>

 ]]></description>
  <category>Marketing</category>
  <category>Product</category>
  <category>Python</category>
  <guid>https://blog.frequentist.org/posts/20240805-kano-model/</guid>
  <pubDate>Mon, 05 Aug 2024 00:00:00 GMT</pubDate>
  <media:content url="https://blog.frequentist.org/posts/20240805-kano-model/image.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Merging Customers Records Using Graphs in Python</title>
  <dc:creator>Aleksei </dc:creator>
  <link>https://blog.frequentist.org/posts/20240731-customers-graphs/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Traditional relational databases and spreadsheets fall short in capturing complex relationships among customers. Enter graph theory – a powerful framework for representing and analyzing interconnected data. By visualizing customer relationships as a graph, we can uncover hidden patterns, identify clusters, and improve data quality.</p>
</section>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>Over time, customers records can become fragmented and duplicated. For example, a customer may use multiple email addresses or phone numbers when interacting with a company. Creating a new record for each email or phone can lead to duplicate records for the same customer. This is especially common in B2B scenarios, where customers often have multiple representatives. Furthermore, some customers represent multiple companies, and their records may be duplicated across different companies.</p>
<p>Doing any type of marketing analysis on such dataset can lead to incorrect results. We cannot be sure about the latest purchase, the total amount spent, or the number of orders. Is this customer a loyal one or not? Is that customer a new one or not? Is this customer going to leave us or they just started buying from another company? Do we need to send a discount to this customer or not? To answer these questions, we need to have customers database defragmented and deduplicated.</p>
<p>Merging records manually can be time-consuming and error-prone. By using graphs, we can represent the relationships between customers, emails, and phones and find groups of connected customers. This can help us identify duplicate records and perform actions depending on our business logic.</p>
</section>
<section id="sample-data" class="level2">
<h2 class="anchored" data-anchor-id="sample-data">Sample Data</h2>
<p>We have three datasets: <code>customers</code>, <code>emails</code>, and <code>phones.</code> Each customer can have multiple emails and phones. The names, emails, and phones are generated randomly and do not correspond to real people, though the structure of the data is similar to what you might find in a real-world scenario. In fact, it <em>is</em> the sample taken from the real data, but the names and other personal information are generated randomly to replace the actual ones.</p>
<div id="d22ded2e" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">customers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/customers.csv"</span>)</span>
<span id="cb1-2">emails <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/emails.csv"</span>)</span>
<span id="cb1-3">phones <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/phones.csv"</span>)</span></code></pre></div>
</div>
<p>Take a look at the data.</p>
<div id="0b932ff1" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">customers.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">customer_id</th>
<th data-quarto-table-cell-role="th">name</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>330087</td>
<td>William Sparks</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>443237</td>
<td>Joseph Williams</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>329867</td>
<td>Eddie Porter</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="777783d7" class="cell" data-execution_count="4">
<div class="cell-output cell-output-stdout">
<pre><code>Length: 1000 Unique: 1000</code></pre>
</div>
</div>
<div id="fdcb909c" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">emails.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">customer_id</th>
<th data-quarto-table-cell-role="th">email</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>599100</td>
<td>brian12@example.net</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>330087</td>
<td>emyers@example.com</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>25494</td>
<td>cindymurphy@example.net</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="1d1b3864" class="cell" data-execution_count="6">
<div class="cell-output cell-output-stdout">
<pre><code>Length: 957 Unique: 626 Duplicated: 331 Empty: 0</code></pre>
</div>
</div>
<div id="646c57f9" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">phones.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">customer_id</th>
<th data-quarto-table-cell-role="th">phone</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>15962</td>
<td>876.997.0254</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>99723</td>
<td>001-706-213-0362</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>99723</td>
<td>886.527.4420x90003</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="ee643cb3" class="cell" data-execution_count="8">
<div class="cell-output cell-output-stdout">
<pre><code>Length: 855 Unique: 524 Duplicated: 331 Empty: 0</code></pre>
</div>
</div>
</section>
<section id="icons-for-nodes" class="level2">
<h2 class="anchored" data-anchor-id="icons-for-nodes">Icons for Nodes</h2>
<p>Next chunk of code creates a dictionary of icons for different types of nodes in the graph. It will be used later to visualize the subgraphs.</p>
<div id="9bbbb540" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PIL</span>
<span id="cb8-2"></span>
<span id="cb8-3">icons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb8-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"icons/customer.png"</span>,</span>
<span id="cb8-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phone"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"icons/phone.png"</span>,</span>
<span id="cb8-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"icons/email.png"</span>,</span>
<span id="cb8-7">}</span>
<span id="cb8-8"></span>
<span id="cb8-9">images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: PIL.Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(fname) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, fname <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> icons.items()}</span></code></pre></div>
</div>
</section>
<section id="creating-a-graph" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-graph">Creating a Graph</h2>
<p>Let’s create graph and add nodes. Each node will represent a customer, email, or phone. We will use the images dictionary to assign an image to each node, but it’s not necessary for the procedure, as well as setting the type of the node.</p>
<div id="2309f98e" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.Graph()</span>
<span id="cb9-2"></span>
<span id="cb9-3">nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> emails[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>].dropna().unique():</span>
<span id="cb9-6">    G.add_node(x, image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>images[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>)</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> phones[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phone"</span>].dropna().unique():</span>
<span id="cb9-9">    G.add_node(x, image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>images[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phone"</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phone"</span>)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> customers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_id"</span>].unique():</span>
<span id="cb9-12">    G.add_node(x, image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>images[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer"</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer"</span>)</span></code></pre></div>
</div>
<p>Next, we will add edges to the graph. The edges will connect customers with their emails and phones.</p>
<div id="6aeb13e8" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> customers[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_id"</span>]].merge(emails).values:</span>
<span id="cb10-4">    edges.append(x)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> customers[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_id"</span>]].merge(phones).values:</span>
<span id="cb10-7">    edges.append(x)</span>
<span id="cb10-8"></span>
<span id="cb10-9">G.add_edges_from(edges)</span></code></pre></div>
</div>
</section>
<section id="finding-groups-of-connected-customers" class="level2">
<h2 class="anchored" data-anchor-id="finding-groups-of-connected-customers">Finding Groups of Connected Customers</h2>
<p>Customers that share the same email or phone will be connected by the edges. Let’s find groups of connected customers.</p>
<div id="6e717621" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(nx.connected_components(G))</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Groups:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(groups))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Groups: 559</code></pre>
</div>
</div>
</section>
<section id="visualizing-the-graph" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-the-graph">Visualizing the Graph</h2>
<p>The number of connected components is rather large to visualize all of them, and most of the groups will contain only a few nodes. Let’s find the groups with the largest number of nodes and visualize them.</p>
<div id="4723db96" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([groups]).T</span>
<span id="cb13-2">df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>]</span>
<span id="cb13-3">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>)</span>
<span id="cb13-4">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span>].hist(bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, log<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group Size Distribution"</span>)</span>
<span id="cb13-6">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-7">plt.close()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20240731-customers-graphs/index_files/figure-html/cell-14-output-1.png" width="573" height="431" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The simplest way to visualize the graph is to use the draw function from the <code>networkx</code> library. We will use the <code>nx.draw</code> function to visualize the graph. We will create a grid of subplots and visualize the top groups. Parameter <code>seed</code> is set to 42 to make the layout reproducible.</p>
<div id="b27b6fce" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb14-2"></span>
<span id="cb14-3">top_groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb14-4">    df.sort_values(</span>
<span id="cb14-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"size"</span>,</span>
<span id="cb14-6">        ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb14-7">    )</span>
<span id="cb14-8">    .head(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes.flatten()))</span>
<span id="cb14-9">    .index</span>
<span id="cb14-10">)</span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, g <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(top_groups):</span>
<span id="cb14-13">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()[i]</span>
<span id="cb14-14">    subgraph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> G.subgraph(groups[g])</span>
<span id="cb14-15">    pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.spring_layout(subgraph, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb14-16">    nx.draw(</span>
<span id="cb14-17">        subgraph,</span>
<span id="cb14-18">        pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pos,</span>
<span id="cb14-19">        with_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb14-20">        node_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>,</span>
<span id="cb14-21">        ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax,</span>
<span id="cb14-22">    )</span>
<span id="cb14-23">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Group </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>g<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-24"></span>
<span id="cb14-25">plt.tight_layout()</span>
<span id="cb14-26">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-27">plt.close()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20240731-customers-graphs/index_files/figure-html/cell-15-output-1.png" width="758" height="566" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>There are literally constellations of different shapes and sizes. Let’s visualize some of them in more detail.</p>
</section>
<section id="visualizing-subgraphs" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-subgraphs">Visualizing Subgraphs</h2>
<p>Let’s visualize one of the largest group in more detail. We will use the <code>nx.draw_networkx_edges</code> function to draw the edges and the <code>imshow</code> function to display the icons of the nodes. We will also add the customer id to the customers’ nodes. The value of parameter <code>seed</code> is set to the same value as in the previous chunk to keep the layout. You can change it to see different layouts.</p>
<div id="63041e7f" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">subgraph <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> G.subgraph(groups[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>])</span>
<span id="cb15-2">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb15-3"></span>
<span id="cb15-4">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nx.spring_layout(subgraph, seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb15-5"></span>
<span id="cb15-6">nx.draw_networkx_edges(</span>
<span id="cb15-7">    subgraph,</span>
<span id="cb15-8">    pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pos,</span>
<span id="cb15-9">    ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax,</span>
<span id="cb15-10">    arrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb15-11">    arrowstyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>,</span>
<span id="cb15-12">    min_source_margin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb15-13">    min_target_margin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb15-14">)</span>
<span id="cb15-15"></span>
<span id="cb15-16"></span>
<span id="cb15-17">tr_figure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax.transData.transform</span>
<span id="cb15-18">tr_axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.transFigure.inverted().transform</span>
<span id="cb15-19"></span>
<span id="cb15-20"></span>
<span id="cb15-21">icon_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (ax.get_xlim()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ax.get_xlim()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.015</span></span>
<span id="cb15-22">icon_center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> icon_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb15-23"></span>
<span id="cb15-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> subgraph.nodes:</span>
<span id="cb15-25">    xf, yf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tr_figure(pos[n])</span>
<span id="cb15-26">    xa, ya <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tr_axes((xf, yf))</span>
<span id="cb15-27">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.axes([xa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> icon_center, ya <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> icon_center, icon_size, icon_size])</span>
<span id="cb15-28">    a.imshow(subgraph.nodes[n][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>])</span>
<span id="cb15-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> G.nodes[n][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer"</span>:</span>
<span id="cb15-30">        a.text(</span>
<span id="cb15-31">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb15-32">            <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb15-33">            n,</span>
<span id="cb15-34">            ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb15-35">            va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb15-36">            fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb15-37">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb15-38">            backgroundcolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>,</span>
<span id="cb15-39">            bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, facecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb15-40">        )</span>
<span id="cb15-41">    a.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"off"</span>)</span>
<span id="cb15-42"></span>
<span id="cb15-43">sns.despine(left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-44"></span>
<span id="cb15-45">plt.show()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-46">plt.close()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://blog.frequentist.org/posts/20240731-customers-graphs/index_files/figure-html/cell-16-output-1.png" width="614" height="611" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="why-graphs-and-not-sql" class="level2">
<h2 class="anchored" data-anchor-id="why-graphs-and-not-sql">Why Graphs and Not SQL?</h2>
<p>We can see here that the customers in this group form pretty complex relationships. A customer may be connected to another one by the phone numbers, and the other one may be connected to the third one by the email, forming a chain of connections. I believe that it is nearly impossible to find this kind of relationship using SQL. The more complex the relationships are, the more time and effort it will take to find them using SQL. For example, if we have a chain of 10 customers, where each customer is connected to the next one by the phone number, it will take 10 joins to find this chain using SQL. If we have 100 customers in the chain, it will take 100 joins to find it using SQL, and the query will probably never complete. But it takes fractions of a second to find it using the graph.</p>
</section>
<section id="assigning-groups-to-customers" class="level2">
<h2 class="anchored" data-anchor-id="assigning-groups-to-customers">Assigning Groups to Customers</h2>
<p>Finally, we will assign a group to each customer. For that, we will expand the groups list and create a new DataFrame with the <code>group_id</code> and <code>customer_id</code> columns.</p>
<div id="157edc97" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([groups]).T</span>
<span id="cb16-2">df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_id"</span>]</span>
<span id="cb16-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.explode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_id"</span>)</span>
<span id="cb16-4">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_id"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.index</span>
<span id="cb16-5">df.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">customer_id</th>
<th data-quarto-table-cell-role="th">group_id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">557</td>
<td>601053</td>
<td>557</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">558</td>
<td>571.212.7377x69843</td>
<td>558</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">558</td>
<td>590385</td>
<td>558</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Note that <code>customer_id</code> column contains phone numbers and emails as well as customer ids, but when we merge the data, there will remain only the customer ids.</p>
<div id="da7ce215" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">customers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customers.merge(df)</span>
<span id="cb17-2">customers.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">customer_id</th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">group_id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>330087</td>
<td>William Sparks</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>443237</td>
<td>Joseph Williams</td>
<td>4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>329867</td>
<td>Eddie Porter</td>
<td>6</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Let’s check the number of customers and unique customer ids to make sure that we didn’t lose any customers neither we added duplicates.</p>
<div id="37fedf06" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(customers), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(customers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_id"</span>].unique())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>(1000, 1000)</code></pre>
</div>
</div>
<p>Looks good. Now we can save the data to the file.</p>
<div id="e71a5f54" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">customers.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/customers_grouped.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this article, we explored how to merge customer records using graphs. We created a graph of customers, emails, and phones and found groups of connected customers. We assigned a group to each customer and saved the data to a file. This approach can help us identify duplicate records and perform actions depending on our business logic. We also visualized the graph and subgraphs to better understand the relationships between customers. This can be useful for marketing analysis, customer segmentation, and other tasks that require a deep understanding of customer relationships.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Graphs</category>
  <guid>https://blog.frequentist.org/posts/20240731-customers-graphs/</guid>
  <pubDate>Wed, 31 Jul 2024 00:00:00 GMT</pubDate>
  <media:content url="https://blog.frequentist.org/posts/20240731-customers-graphs/image.png" medium="image" type="image/png" height="108" width="144"/>
</item>
</channel>
</rss>
