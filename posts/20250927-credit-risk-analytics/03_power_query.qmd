---
title: "Scripts for Power Query"
author: "Aleksei Prishchepo"
date: "2025-09-20"
fig-format: svg
number-sections: true
format:
  html:
    toc: true
    toc-depth: 2
    toc-location: left
    highlight-style: tango
---

In this document, we will create R scripts that can be used in Power Query within Power BI. The scripts will cover data preparation, encoding categorical variables, and building a logistic regression model with marginal effects and cross-validation.

## Load data


```{r load_data}

dataset <- readxl::read_excel("Credit_Risk_Dataset_Onyx_Data_September_25.xlsx")
```


## Prepared Data

```{r prepared-data}
library(dplyr)
library(caret)

# Select variables of interest (see )

selected_variables <- c(
  "client_ID", "loan_status", "person_age", "person_income",
  "person_home_ownership", "person_emp_length", "loan_intent", "loan_amnt",
  "loan_status", "cb_person_default_on_file", "city", "loan_to_income_ratio",
  "other_debt", "debt_to_income_ratio", "credit_utilization_ratio", 
  "loan_int_rate"
)

dataset <- dataset |> select(all_of(selected_variables)) |> data.frame()

# Replace outliers

dataset <- dataset |>
  mutate(
    person_age = ifelse(person_age > 100,
      median(person_age, na.rm = TRUE),
      person_age
    ),
    person_emp_length = ifelse(person_emp_length > 70,
      median(person_emp_length, na.rm = TRUE),
      person_emp_length
    )
  )

# Impute missing
dataset <- dataset |>
  mutate(across(where(is.numeric), ~ ifelse(is.na(.),
    median(., na.rm = TRUE), .
  )))

# Split into train and test
set.seed(123)

train_index <- createDataPartition(dataset$loan_status, p = 0.7, list = FALSE)

dataset[train_index, "is_train"] <- 1
dataset[-train_index, "is_train"] <- 0

output <- dataset

glimpse(output)

```

```{r save-encoded}
readr::write_csv(output, "prepared_dataset.csv")
```

## Marginal Effects from GLM

```{r load-dataset}
dataset <- read.csv("prepared_dataset.csv")
```


```{r glm-model}
library(dplyr)
library(caret)

# Select variables for GLM (see 01_eda.qmd)

continuous_variables <- c(
  "person_emp_length", "loan_amnt", "loan_to_income_ratio"
)
factor_columns <- c(
  "person_home_ownership", "loan_intent", "cb_person_default_on_file"
)

train <- dataset |> select(c(
  "loan_status", all_of(continuous_variables),
  all_of(factor_columns)
))

train <- train |> mutate(across(where(is.character), as.factor)) |> data.frame()

# First, train without standardizing
glm_model <- glm(loan_status ~ .,
  family = "binomial", data = train
)

p_hat <- predict(glm_model, type = "response")

# Extract coefficients
betas <- coef(glm_model)

# Add betas for omitted levels of factors
for (col in factor_columns) {
  levels_col <- levels(train[[col]])
  for (lvl in levels_col) {
    var_name <- paste0(col, lvl)
    if (!(var_name %in% names(betas))) {
      betas[var_name] <- 0
    }
  }
}

# Compute marginal effects: β_j * p * (1-p)
AME <- sapply(1:length(betas), function(j) {
  mean(betas[j] * p_hat * (1 - p_hat), na.rm = TRUE)
})

names(AME) <- names(betas)
raw_effects <- data.frame(effect_raw = AME, coef = betas) |>
  tibble::rownames_to_column(var = "Variable")


# Now standardize continuous variables and retrain
train <- train |> mutate(across(
  .cols = c(continuous_variables),
  .fns = ~ (. - mean(., na.rm = TRUE)) / sd(., na.rm = TRUE)
))

glm_model <- glm(loan_status ~ .,
  family = "binomial", data = train
)

p_hat <- predict(glm_model, type = "response")

# Extract coefficients
betas <- coef(glm_model)

# Add betas for omitted levels of factors
for (col in factor_columns) {
  levels_col <- levels(train[[col]])
  for (lvl in levels_col) {
    var_name <- paste0(col, lvl)
    if (!(var_name %in% names(betas))) {
      betas[var_name] <- 0
    }
  }
}

# Compute marginal effects: β_j * p * (1-p)
AME <- sapply(1:length(betas), function(j) {
  mean(betas[j] * p_hat * (1 - p_hat), na.rm = TRUE)
})

names(AME) <- names(betas)

output <- data.frame(effect_std = AME) |>
  tibble::rownames_to_column(var = "Variable")

output <- output |> left_join(raw_effects, by = "Variable")

# Separate factor and continuous variables

reg_templ <- paste(factor_columns, collapse = "|")

output <- output |> 
  mutate(Variable = gsub("[\\(\\)]", "", Variable))
output <- output |> mutate(Factor = gsub(reg_templ, "", Variable))
output <- output |> mutate(Factor = stringr::str_replace(Factor, Variable, ""))

output <- output |> 
  mutate(Variable = gsub(paste0("(", reg_templ, ").+"), "\\1", Variable))

output
```

```{r}
summary(glm_model)
```

## Cross-Validation for GLM

```{r load-dataset-2}
dataset <- read.csv("prepared_dataset.csv")
```

```{r glm-cross-validation}
library(dplyr)
library(tidyr)
library(caret)

dataset <- dataset |>
  mutate(
    loan_status = as.factor(loan_status)
  )

selected_variables <- c(
  "loan_status", "person_emp_length", "loan_amnt", "loan_to_income_ratio",
  "person_home_ownership", "loan_intent", "cb_person_default_on_file"
)

train <- dataset |>
  filter(is_train == 1) |>
  select(all_of(selected_variables))

test <- dataset |>
  filter(is_train == 0) |>
  select(all_of(selected_variables)) 

glm_model <- glm(loan_status ~ .,
  family = "binomial", data = train
)

glm_probs <- predict(glm_model, newdata = test, type = "response")

glm_pred <- ifelse(glm_probs > 0.5, 1, 0) |> as.factor()

# Confusion matrix
conf_matrix <- confusionMatrix(glm_pred, test$loan_status)

output <- data.frame(Value = conf_matrix$byClass) |>
  tibble::rownames_to_column(var = "Parameter") |>
  pivot_wider(names_from = Parameter, values_from = Value)

output
```

